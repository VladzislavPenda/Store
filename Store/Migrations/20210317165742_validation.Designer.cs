// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Store.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210317165742_validation")]
    partial class validation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Entities.Models.ShopCarcaseType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("carcaseTypeId")
                        .UseIdentityColumn();

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("shopCarcaseTypes");
                });

            modelBuilder.Entity("Entities.Models.ShopDriveType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("driveTypeId")
                        .UseIdentityColumn();

                    b.Property<string>("type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("shopDriveTypes");
                });

            modelBuilder.Entity("Entities.Models.ShopEngineType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("engineTypeId")
                        .UseIdentityColumn();

                    b.Property<string>("type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("ShopEngineTypes");
                });

            modelBuilder.Entity("Entities.Models.ShopMark", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("markId")
                        .UseIdentityColumn();

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("markNum")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("shopMarks");
                });

            modelBuilder.Entity("Entities.Models.ShopModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("carcaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("driveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("engineTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("horsePower")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("markId")
                        .HasColumnType("int");

                    b.Property<int>("mileAge")
                        .HasColumnType("int");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("transmissionId")
                        .HasColumnType("int");

                    b.Property<int?>("year")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("carcaseTypeId");

                    b.HasIndex("driveTypeId");

                    b.HasIndex("engineTypeId");

                    b.HasIndex("markId");

                    b.HasIndex("transmissionId");

                    b.ToTable("ShopModels");
                });

            modelBuilder.Entity("Entities.Models.ShopTransmissionType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transmissionId")
                        .UseIdentityColumn();

                    b.Property<string>("type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("shopTransmissionTypes");
                });

            modelBuilder.Entity("Entities.Models.ShopModel", b =>
                {
                    b.HasOne("Entities.Models.ShopCarcaseType", "ShopCarcaseType")
                        .WithMany("ShopModels")
                        .HasForeignKey("carcaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ShopDriveType", "ShopDriveType")
                        .WithMany("ShopModels")
                        .HasForeignKey("driveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ShopEngineType", "ShopEngineType")
                        .WithMany("ShopModels")
                        .HasForeignKey("engineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ShopMark", "ShopMark")
                        .WithMany("ShopModels")
                        .HasForeignKey("markId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ShopTransmissionType", "ShopTransmissionType")
                        .WithMany("ShopModels")
                        .HasForeignKey("transmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopCarcaseType");

                    b.Navigation("ShopDriveType");

                    b.Navigation("ShopEngineType");

                    b.Navigation("ShopMark");

                    b.Navigation("ShopTransmissionType");
                });

            modelBuilder.Entity("Entities.Models.ShopCarcaseType", b =>
                {
                    b.Navigation("ShopModels");
                });

            modelBuilder.Entity("Entities.Models.ShopDriveType", b =>
                {
                    b.Navigation("ShopModels");
                });

            modelBuilder.Entity("Entities.Models.ShopEngineType", b =>
                {
                    b.Navigation("ShopModels");
                });

            modelBuilder.Entity("Entities.Models.ShopMark", b =>
                {
                    b.Navigation("ShopModels");
                });

            modelBuilder.Entity("Entities.Models.ShopTransmissionType", b =>
                {
                    b.Navigation("ShopModels");
                });
#pragma warning restore 612, 618
        }
    }
}
